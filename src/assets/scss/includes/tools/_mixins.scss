/*----------------------------------------------------------------------------*\
   #MIXINS
\*----------------------------------------------------------------------------*/

/*
 * Equivalent to the rhythm function but for horizontal spacing based on a $base-gutter variable.
 */
@function gutter( $lines: 1, $font-size: $base-font-size, $offset: 0 ) {
    $gutter: convert-length( $lines * $base-gutter - $offset, $rhythm-unit, $font-size );
    @if unit( $gutter ) == px {
        $gutter: floor( $gutter );
    }
    @return $gutter;
}

/*
 * Button variation generator
 */
@mixin button-factory( $background: "", $color: "", $hover-background: "", $hover-colour: "", $trans-colour: "", $font-size: "" ) {

    @if $font-size != "" {
        @include adjust-font-size-to( $font-size );
    }

    @if $background != "" {
        background: $background;
        border-color: $background;
    }

    @if $color != "" {
        color: $color;
    }

    @if $background != "" && $color != "" {
        &.btn--transparent {
            box-shadow: inset 0 0 0 2px $background;
            background-color: transparent;

            &.btn--small {
                box-shadow: inset 0 0 0 1px $background;
            }

            @if $trans-colour != "" {
                color: $trans-colour;
            } @else {
                color: #ffffff;
            }

            &:not([disabled]):hover {
                @if $hover-background != "" {
                    box-shadow: inset 0 0 0 2px $hover-background;
                    background: $hover-background;

                    &.btn--small {
                        box-shadow: inset 0 0 0 1px $hover-background;
                    }

                } @else {
                    background: $background;
                }

                @if $hover-colour != "" {
                    color: $hover-colour;
                } @else {
                    color: $color;
                }
            }

            .old & {
                border: 2px solid $background;

                &.btn--small {
                    border: 1px solid $background;
                }

                &:hover {
                    border-color: $hover-background;
                }
            }
        }
    }

    &:not([disabled]):hover {
        @if $hover-background != "" {
            background: $hover-background;
        } @else if $background != "" {
            // background: darken( $background, 10% );
            background: $background;
            // opacity: 0.8;
        }

        @if $hover-colour != "" {
            color: $hover-colour;
        }
    }
}


/*
 * Turn PX to REM ( as long as that's the unit we're using )
 */
@function px-to-rem( $size ) {
    @if $rhythm-unit == "rem" {
        $rems: $size / $base-font-size;
        @return #{$rems}rem;
    }

    @return $size;
}


/*
 * Helper mixin for linear gradient
 */
@mixin css-gradient( $from: "", $to: "" ) {
    background-image: -webkit-gradient( linear, left top, left bottom, from( $from ), to( $to ) );
    background-image: -webkit-linear-gradient( top, $from, $to );
    background-image: -moz-linear-gradient( top, $from, $to );
    background-image: -o-linear-gradient( top, $from, $to );
    background-image: -ms-linear-gradient( top, $from, $to );
    background-image: linear-gradient( top, $from, $to );
}


/*
 * Helper mixin for animations
 */
@mixin animation( $name, $duration, $timing, $direction: normal, $iteration: 1, $fill: both ) {
    animation-name: $name;
    animation-duration: $duration;
    animation-timing-function: $timing;
    animation-direction: $direction;
    animation-iteration-count: $iteration;
    animation-fill-mode: $fill;
}


/*
 * Helper mixin for creating CSS triangles
 */
@mixin triangle( $width, $height, $color, $direction ) {
    $width: $width/2;
    $color-border-style: $height solid $color;
    $transparent-border-style: $width solid transparent;
    height: 0;
    width: 0;

    @if $direction == up {
        border-bottom: $color-border-style;
        border-left: $transparent-border-style;
        border-right: $transparent-border-style;
    }

    @else if $direction == right {
        border-left: $color-border-style;
        border-top: $transparent-border-style;
        border-bottom: $transparent-border-style;
    }

    @else if $direction == down {
        border-top: $color-border-style;
        border-left: $transparent-border-style;
        border-right: $transparent-border-style;
    }

    @else if $direction == left {
        border-right: $color-border-style;
        border-top: $transparent-border-style;
        border-bottom: $transparent-border-style;
    }

}


/*
 * Helper mixin for media queries
 *
 * Accepts a $max, $min value, or both.
 * Values can be passed in as px values or variables
 */
@mixin breakpoint( $max: "", $min: "" ) {

    // If we have both $max and $min values.
    @if $max != "" and $min != "" {

        @media only screen and ( max-width: $max ) and ( min-width: $min ) {
            @content;
        }

    }

    // If we have only a $max value.
    @elseif $max != "" and $min == "" {

        @media only screen and ( max-width: $max ) {
            @content;
        }

    }

    // If we have only a $min value.
    @elseif $max == "" and $min != "" {

        @media only screen and ( min-width: $min ) {
            @content;
        }

    }

    // If nothing works, throw an error.
    @else {

        @error "Please make sure it is defined in `$breakpoints` map or you've defined a unit.";

    }


}

// @mixin breakpoint( $max: "", $min: "" ) {
//
//     // If we're using variables from $breakpoints, get the values
//     @if map-has-key( $breakpoints, $max ) or map-has-key( $breakpoints, $min ) {
//
//         // Both have values
//         @if $max != "" and $min != "" {
//
//             @media only screen and ( max-width: #{ map-get( $breakpoints, $max ) } ) and ( min-width: #{ map-get( $breakpoints, $min ) } ) {
//                 @content;
//             }
//
//         }
//
//         // $max has value
//         @elseif $max != "" and $min == "" {
//
//             @media only screen and ( max-width: #{ map-get( $breakpoints, $max ) } ) {
//                 @content;
//             }
//
//         }
//
//         // $min has value
//         @elseif $max == "" and $min != "" {
//
//             @media only screen and ( min-width: #{ map-get( $breakpoints, $min ) } ) {
//                 @content;
//             }
//
//         }
//
//     }
//
//     // If the breakpoint is not in the $breakpoints array, see if we have units
//     @elseif unit( $max ) != "" or unit( $min ) != "" {
//
//         // Both have values and units
//         @if $max != "" and unit( $max ) != "" and $min != "" and unit( $min ) != "" {
//
//             @media only screen and ( max-width: $max ) and ( min-width: $min ) {
//                 @content;
//             }
//
//         }
//
//         // $max has value and unit
//         @elseif $max != "" and unit( $max ) != "" and $min == "" {
//
//             @media only screen and ( max-width: $max ) {
//                 @content;
//             }
//
//         }
//
//         // $min has value and unit
//         @elseif $max == "" and $min != "" and unit( $min ) != "" {
//
//             @media only screen and ( min-width: $min ) {
//                 @content;
//             }
//
//         }
//
//         // If something goes wrong (one with a unit, one without, throw an error).
//         @else {
//
//             @error( "Please make sure you defined a unit." );
//
//         }
//
//     }
//
//     // If nothing works, throw an error.
//     @else {
//
//         @error "Please make sure it is defined in `$breakpoints` map or you've defined a unit.";
//
//     }
//
//
// }
